name: Test and Deploy to AWS

on:
  repository_dispatch:
    types:
      - deploy-blog-webhook
  workflow_dispatch:
  push:
    branches: [master]

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        node-version: [12.x, 14.x, 15.x]
        os: [ubuntu-latest, macos-latest]

    steps:
      - uses: actions/checkout@v2

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2.1.4
        with:
          node-version: ${{ matrix.node-version }}

      - name: installing dependencies
        run: yarn

      - name: run unit test
        run: yarn test

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v2

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Use Node.js 15.x
        uses: actions/setup-node@v2.1.4
        with:
          node-version: 15.x
      - name: installing dependencies
        run: yarn

      - name: Building website
        run: yarn build

      - name: serverless deploy
        uses: serverless/github-action@master
        with:
          args: deploy --stage production
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Deployed Blog
        if: ${{ github.event.action == 'deploy-blog-webhook' }}
        run: echo "blog page has been deployed"

      - name: send message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.w }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
